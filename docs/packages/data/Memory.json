{
  "name": "Memory",
  "package": "unsafe",
  "type": "Static library",
  "intro": "Memory_description.md",
  "examples": "MemoryExamples",
  "tests": "memory_tests",
  "perfs": "memory_perfs",
  "functions": [
    {
      "name": "equals",
      "desc": "Checks if the data stored in two segments of memory is the same.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The first memory address."
        },
        {
          "name": "addr2",
          "type": "uint",
          "desc": "The second memory address."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The number of bytes to check."
        }
      ],
      "outParams": [
        {
          "type": "bool",
          "desc": "`true` if the bytes are equal, otherwise false."
        }
      ],
      "ensures": [
        "`equals(addr1, addr2, len) => 'n' in [0, len), Memory[addr1 + n][0] == Memory[addr2 + n][0]`"
      ],
      "gas": [
        [
          "Equals check of 16 bytes",
          "PerfMemoryEqualsHalfWord"
        ],
        [
          "Equals check of one word",
          "PerfMemoryEqualsOneWord"
        ],
        [
          "Equals check of ten words",
          "PerfMemoryEqualsTenWords"
        ],
        [
          "Equals check of one hundred words",
          "PerfMemoryEqualsHundredWords"
        ]
      ]
    },
    {
      "name": "equals",
      "desc": "Checks if the data stored in a segment of memory is the same as (part of) the data stored by a `bytes memory`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The memory address."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The number of bytes to check."
        },
        {
          "name": "bts",
          "type": "bytes",
          "refType": "memory",
          "desc": "The bytes array."
        }
      ],
      "outParams": [
        {
          "type": "bool",
          "desc": "`true` if the bytes are equal, otherwise false."
        }
      ],
      "requires": [
        "len <= bts.length"
      ],
      "ensures": [
        "`equals(addr, len, bts) => 'n' in [0, len), Memory[addr + n][0] == uint8(bts[n])`"
      ],
      "gas": [
        [
          "Equals check of one word",
          "PerfMemoryEqualsBytesOneWord"
        ]
      ]
    },
    {
      "name": "allocate",
      "desc": "Allocates a section of memory, and initializes the bytes to `0`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "numBytes",
          "type": "uint",
          "desc": "The number of bytes that should be allocated."
        }
      ],
      "outParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The (starting) address of the newly allocated segment."
        }
      ],
      "ensures": [
        "`addr = allocate(len) => FMP += len && for 'n' in [0, len), Memory[addr + n] == 0`"
      ],
      "gas": [
        [
          "Allocation of one word",
          "PerfMemoryAllocateOneWord"
        ],
        [
          "Allocation of ten words",
          "PerfMemoryAllocateTenWords"
        ]
      ]
    },
    {
      "name": "copy",
      "desc": "Copy a segment of memory.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "src",
          "type": "uint",
          "desc": "The source address."
        },
        {
          "name": "dest",
          "type": "uint",
          "desc": "The destination address."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The number of bytes to copy."
        }
      ],
      "ensures": [
        "`copy(src, dest, len) => for 'n' in [0, len), Memory[dest + n][0] == Memory[src + n][0]`"
      ],
      "gas": [
        [
          "Copying 16 bytes",
          "PerfMemoryCopyHalfWord"
        ],
        [
          "Copying one word",
          "PerfMemoryCopyOneWord"
        ],
        [
          "Copying ten words",
          "PerfMemoryCopyTenWords"
        ]
      ]
    },
    {
      "name": "ptr",
      "desc": "Get a memory pointer to a `bytes` array.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "bts",
          "type": "bytes",
          "reftype": "memory",
          "desc": "The `bytes` array."
        }
      ],
      "outParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The pointer to the `bytes` in memory."
        }
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryPtrBytes"
        ]
      ]
    },
    {
      "name": "dataPtr",
      "desc": "Get a memory pointer to the data section of a `bytes` array.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "bts",
          "type": "bytes",
          "reftype": "memory",
          "desc": "The `bytes` array."
        }
      ],
      "outParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The pointer to the data section of the `bytes` in memory."
        }
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryDataPtrBytes"
        ]
      ]
    },
    {
      "name": "fromBytes",
      "desc": "Get the address of the data stored by a `bytes memory`, and its length.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "bts",
          "type": "bytes",
          "reftype": "memory",
          "desc": "The `bytes`."
        }
      ],
      "outParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The pointer to the data section of the `bytes` in memory."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The length of the `bytes`."
        }
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryFromBytes"
        ]
      ]
    },
    {
      "name": "toBytes",
      "desc": "Create a `bytes memory` from a starting address and a length. NOTE this will copy the bytes.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The memory address."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The length."
        }
      ],
      "outParams": [
        {
          "name": "bts",
          "type": "bytes",
          "refType": "memory",
          "desc": "The new `bytes` array."
        }
      ],
      "gas": [
        [
          "Create a one word long byte array",
          "PerfMemoryToBytesOneWord"
        ]
      ]
    },
    {
      "name": "toUint",
      "desc": "Get a word of memory as a `uint`",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The memory address."
        }
      ],
      "outParams": [
        {
          "name": "n",
          "type": "uint",
          "desc": "The word as a `uint`."
        }
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryToUint"
        ]
      ]
    },
    {
      "name": "toBytes32",
      "desc": "Get a word of memory as a `bytes32`",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The memory address."
        }
      ],
      "outParams": [
        {
          "name": "bts",
          "type": "bytes32",
          "desc": "The word as a `bytes32`."
        }
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryToBytes32"
        ]
      ]
    },{
      "name": "toByte",
      "desc": "Get a single byte from memory.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "addr",
          "type": "uint",
          "desc": "The memory address."
        },
        {
          "name": "index",
          "type": "uint8",
          "desc": "The index of the byte."
        }
      ],
      "outParams": [
        {
          "name": "b",
          "type": "byte",
          "desc": "The byte."
        }
      ],
      "requires": [
        "`0 <= index < 32`"
      ],
      "ensures": [
        "`b = toByte(addr, index) => b == toBytes32(addr)[index]`"
      ],
      "gas": [
        [
          "Fixed",
          "PerfMemoryToByte"
        ]
      ]
    }
  ]
}