{
  "name": "Bytes",
  "package": "bytes",
  "type": "Static library",
  "intro": "Bytes_description.md",
  "functions": [
    {
      "name": "equals",
      "desc": "Checks if two `bytes memory` are equal. This is a more efficient method then checking each index manually.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The first bytes."
        },
        {
          "name": "other",
          "type": "bytes",
          "refType": "memory",
          "desc": "The second bytes."
        }
      ],
      "outParams": [
        {
          "type": "bool",
          "desc": "`true` if the two `bytes memory` are equal, otherwise `false`."
        }
      ],
      "ensures": [
        "`bts.equals(bts2) => bts.length == bts2.length`",
        "`bts.equals(bts2) => for i in [0, bts.length): bts[i] == bts2[i]`"
      ],
      "gas": [
        [
          "One word",
          "PerfBytesEqualsOneWordSuccess"
        ],
        [
          "Ten words",
          "PerfBytesEqualsTenWordsSuccess"
        ],
        [
          "Early out on different lengths",
          "PerfBytesEqualsDifferentLengthFail"
        ]
      ]
    },
    {
      "name": "equalsRef",
      "desc": "Checks if two `bytes memory` are the same by comparing their internal references.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The first bytes."
        },
        {
          "name": "other",
          "type": "bytes",
          "refType": "memory",
          "desc": "The second bytes."
        }
      ],
      "outParams": [
        {
          "type": "bool",
          "desc": "`true` if the two `bytes memory` are equal, otherwise `false`."
        }
      ],
      "ensures": [
        "`bts.equalsRef(bts2) => bts.equals(bts2)`",
        "`bts.equalsRef(bts2) => for i in [0, bts.length): bts[i] = x <=> bts2[i] = x` (mutating one affects both)"
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesEqualsRef"
        ]
      ]
    },
    {
      "name": "copy",
      "desc": "Copies a `bytes memory` array.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The source bytes."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "typeRef": "memory",
          "desc": "The copy."
        }
      ],
      "ensures": [
        "`cpy = self.copy() => cpy.equals(self)`",
        "`cpy = self.copy() => !cpy.equalsRef(self)`",
        "`cpy = self.copy() => for i in [0, self.length): cpy[i] == self[i]`"
      ],
      "gas": [
        [
          "Copy empty bytes",
          "PerfBytesCopyEmpty"
        ],
        [
          "Copy one word",
          "PerfBytesCopyOneWord"
        ],
        [
          "Copy ten words",
          "PerfBytesCopyTenWords"
        ]
      ]
    },
    {
      "name": "substr",
      "desc": "Same as `copy(bytes memory)` but starts copying at position `startIndex`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The source bytes."
        },
        {
          "name": "startIndex",
          "type": "uint",
          "desc": "The index to start copying from."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "typeRef": "memory",
          "desc": "The copied bytes."
        }
      ],
      "requires": [
        "`startIndex < self.length`"
      ],
      "ensures": [
        "`sst = self.substr(startIndex) => sst.length = self.length - startIndex`.",
        "`sst = self.substr(startIndex) => sst = [self[startIdx], self[startIdx + 1], ... , self[self.length - 1]]`."
      ],
      "gas": [
        [
          "Copy one word",
          "PerfBytesSubstrOneWord"
        ]
      ]
    },
    {
      "name": "substr",
      "desc": "This function copies `len` number of bytes from `self`, starting at `startIndex`.\n\nCalling `bts.copy()` is the same as calling `bts.substr(0, bts.length)`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The source bytes."
        },
        {
          "name": "startIndex",
          "type": "uint",
          "desc": "The index to start copying from."
        },
        {
          "name": "len",
          "type": "uint",
          "desc": "The number of bytes to copy."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "typeRef": "memory",
          "desc": "The copied bytes."
        }
      ],
      "requires": [
        "`startIndex < self.length`",
        "`startIndex + len <= self.length`."
      ],
      "ensures": [
        "`sst = self.substr(startIndex, len) => sst.length = len`.",
        "`sst = self.copy(startIndex, len) => sst = [self[startIdx], self[startIdx + 1], ... , self[startIdx + len - 1]]`."
      ],
      "gas": [
        [
          "Copy one word",
          "PerfBytesSubstrWithLengthOneWord"
        ]
      ]
    },{
      "name": "concat",
      "desc": "Concatenates two `bytes memory` arrays into one single array.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes",
          "refType": "memory",
          "desc": "The first bytes."
        },
        {
          "name": "other",
          "type": "bytes",
          "refType": "memory",
          "desc": "The second bytes."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The concatenated bytes."
        }
      ],
      "ensures": [
        "`btsCnct = self.concat(other) => btsCnct.length == self.length + other.length`.",
        "`btsCnct = self.concat(other) => btsCnct = [self[0], self[1], ... , self[self.length - 1], other[0], other[1], ... , other[other.length - 1]]`."
      ],
      "gas": [
        [
          "Concat two empty bytes",
          "PerfBytesConcatEmpty"
        ],
        [
          "Concat two one-word arrays",
          "PerfBytesConcatTwoWords"
        ],
        [
          "Concat two five-word arrays",
          "PerfBytesConcatTenWords"
        ]
      ]
    },{
      "name": "substr",
      "desc": "Create a substring of a `bytes32`, starting at `startIndex`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes32."
        },
        {
          "name": "startIndex",
          "type": "uint8",
          "desc": "The start index."
        }
      ],
      "outParams": [
        {
          "type": "bytes32",
          "desc": "The substring."
        }
      ],
      "requires": [
        "`startIndex < 32`"
      ],
      "ensures": [
        "sst = self.substr(startIndex) => for i in [0, 32 - startIndex): sst[i] == self[startIndex + i], for i in [32 - startIndex, 32), sst[i] == 0."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBytes32Substr"
        ]
      ]
    },{
      "name": "substr",
      "desc": "Create a substring of a `bytes32`, starting at `startIndex`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes32."
        },
        {
          "name": "startIndex",
          "type": "uint8",
          "desc": "The start index."
        },
        {
          "name": "len",
          "type": "uint8",
          "desc": "The number of bytes to copy."
        }
      ],
      "outParams": [
        {
          "type": "bytes32",
          "desc": "The substring."
        }
      ],
      "requires": [
        "`startIndex < 32`",
        "`startIndex + len <= 32`"
      ],
      "ensures": [
        "sst = self.substr(startIndex, len) => for i in [0, len): sst[i] == self[startIndex + i] && for i in [len, 32), sst[i] == 0."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBytes32SubstrWithLength"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from a `bytes32`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes32."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The bytes as a `bytes memory`. Note that the bytes array will be of length 32."
        }
      ],
      "ensures": [
        "`bts = self.toBytes() => bts.length = 32`.",
        "`bts = self.toBytes() => for i in [0, 32): bts[i] = self[i]`."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBytes32ToBytes"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` by copying `len` bytes from the source `bytes32`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes32."
        },
        {
          "name": "len",
          "type": "uint8",
          "desc": "The source bytes32."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The bytes as a `bytes memory`. Note that the bytes array will be of length 32."
        }
      ],
      "require": [
        "`len <= 32`"
      ],
      "ensures": [
        "`bts = self.toBytes(len) => bts.length = len`.",
        "`bts = self.toBytes(len) => for i in [0, len): bts[i] = self[i]`."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBytes32ToBytesWithLength"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from an `address`. Note that bytes use big endian formatting, i.e. resultBytes[0] is the highest order byte.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "address",
          "desc": "The source address."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The address as a `bytes memory`. Note that the bytes array will be of length 20."
        }
      ],
      "ensures": [
        "`bts = self.toBytes() => bts.length = 20`.",
        "`bts = self.toBytes() => for i in [0, 20): bts[i] = bytes20(self)[i]`."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesAddressToBytes"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from a `uint`. Note that bytes use big endian formatting, i.e. resultBytes[0] is the highest order byte.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "uint",
          "desc": "The source uint."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The uint as a `bytes memory`. Note that the bytes array will be of length 32."
        }
      ],
      "ensures": [
        "`bts = self.toBytes() => bts.length = 32`.",
        "`bts = self.toBytes() => for i in [0, 32): bts[i] = bytes32(self)[i]`."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesUintToBytes"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from a `uint`. Only `bitsize` bits are copied. Note that bytes use big endian formatting, i.e. resultBytes[0] is the highest order byte.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "uint",
          "desc": "The source uint."
        },
        {
          "name": "bitsize",
          "type": "uint16",
          "desc": "The number of bits to use."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The uint as a `bytes memory`. Note that the bytes array will be of length `bitsize / 8`."
        }
      ],
      "requires": [
        "`8 <= bitsize`",
        "`bitsize <= 256`",
        "`bitsize % 8 == 0`"
      ],
      "ensures": [
        "`bts = self.toBytes(bitsize) => bts.length = bitsize / 8`.",
        "`bts = self.toBytes(bitsize) => for i in [0, bitsize / 8): bts[i] = byte(self >> bitsize - 8 - i*8 & 0xFF)`."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesUintToBytesWithBitsize"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from a `boolean`.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bool",
          "desc": "The source boolean."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The boolean as a `bytes memory`. Note that the bytes array will be of length 1."
        }
      ],
      "ensures": [
        "`bts = self.toBytes() => bts.length = 1`.",
        "`bts = self.toBytes() => if self == true: bts = [1], else bts = [0]."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBytes32ToBytes"
        ]
      ]
    },{
      "name": "toBytes",
      "desc": "Create a new `bytes memory` from a boolean.",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bool",
          "desc": "The source boolean."
        }
      ],
      "outParams": [
        {
          "type": "bytes",
          "refType": "memory",
          "desc": "The boolean as a `bytes memory`. Note that the bytes array will be of length 1."
        }
      ],
      "ensures": [
        "`bts = self.toBytes() => bts.length = 1`.",
        "`bts = self.toBytes() => if self == true: bts = [1], else bts = [0]."
      ],
      "gas": [
        [
          "Fixed",
          "PerfBytesBooleanToBytes"
        ]
      ]
    },{
      "name": "highestByteSet",
      "desc": "Calculates the index of the highest non-zero byte in a `bytes32`. Note that bytes uses big endian ordering (the most significant byte is the lowest).",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes."
        }
      ],
      "outParams": [
        {
          "name": "highest",
          "type": "uint8",
          "desc": "The index of the highest byte set."
        }
      ],
      "requires": [
        "`self != 0`"
      ],
      "ensures": [
        "`highest = self.highestByteSet() => if i > highest: self[i] == 0`."
      ],
      "gas": [
        [
          "Highest byte set for max index",
          "PerfBytesBytes32HighestByteSetHigh"
        ],
        [
          "Highest byte set for min index",
          "PerfBytesBytes32HighestByteSetLow"
        ]
      ]
    },{
      "name": "lowestByteSet",
      "desc": "Calculates the index of the lowest non-zero byte in a `bytes32`. Note that bytes uses big endian ordering (the most significant byte is the lowest).",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "bytes32",
          "desc": "The source bytes."
        }
      ],
      "outParams": [
        {
          "name": "lowest",
          "type": "uint8",
          "desc": "The index of the lowest byte set."
        }
      ],
      "requires": [
        "`self != 0`"
      ],
      "ensures": [
        "`lowest = self.lowestByteSet() => if i < lowest: self[i] == 0`."
      ],
      "gas": [
        [
          "Lowest byte set for max index",
          "PerfBytesBytes32LowestByteSetHigh"
        ],
        [
          "Lowest byte set for min index",
          "PerfBytesBytes32LowestByteSetLow"
        ]
      ]
    },{
      "name": "highestByteSet",
      "desc": "Calculates the index of the highest non-zero byte in a `uint`. Note that integers uses little endian ordering (the least significant byte is the lowest).",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "uint",
          "desc": "The source uint."
        }
      ],
      "outParams": [
        {
          "name": "highest",
          "type": "uint8",
          "desc": "The index of the highest byte set."
        }
      ],
      "requires": [
        "`self != 0`"
      ],
      "ensures": [
        "`highest = self.highestByteSet() => if i > highest: self >> i*8 == 0`."
      ],
      "gas": [
        [
          "Highest byte set for max index",
          "PerfBytesUintHighestByteSetHigh"
        ],
        [
          "Highest byte set for min index",
          "PerfBytesUintHighestByteSetLow"
        ]
      ]
    },{
      "name": "lowestByteSet",
      "desc": "Calculates the index of the lowest non-zero byte in a `uint`. Note that bytes uses little endian ordering (the most significant byte is the lowest).",
      "visibility": "internal",
      "qualifier": "pure",
      "inParams": [
        {
          "name": "self",
          "type": "uint",
          "desc": "The source uint."
        }
      ],
      "outParams": [
        {
          "name": "lowest",
          "type": "uint8",
          "desc": "The index of the lowest byte set."
        }
      ],
      "requires": [
        "`self != 0`"
      ],
      "ensures": [
        "`lowest = self.lowestByteSet() => if i < lowest: self << (32 - lowest)*8 == 0`."
      ],
      "gas": [
        [
          "Lowest byte set for max index",
          "PerfBytesUintLowestByteSetHigh"
        ],
        [
          "Lowest byte set for min index",
          "PerfBytesUintLowestByteSetLow"
        ]
      ]
    }
  ]
}